// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "custom2.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic custom2::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<32> custom2::ap_const_lv32_1 = "1";
const sc_lv<2> custom2::ap_const_lv2_0 = "00";
const sc_logic custom2::ap_const_logic_0 = sc_dt::Log_0;

custom2::custom2(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_first_counter_fu_70 = new first_counter("grp_first_counter_fu_70");
    grp_first_counter_fu_70->enable(enable);
    grp_first_counter_fu_70->out_counter(grp_first_counter_fu_70_out_counter);
    grp_first_counter_fu_70->clock(clock1);
    grp_first_counter_fu_70->reset(reset);
    grp_first_counter_fu_86 = new first_counter("grp_first_counter_fu_86");
    grp_first_counter_fu_86->enable(enable);
    grp_first_counter_fu_86->out_counter(grp_first_counter_fu_86_out_counter);
    grp_first_counter_fu_86->clock(clock2);
    grp_first_counter_fu_86->reset(reset);

    SC_METHOD(thread_ap_CS_fsm);

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_out_counter1);
    sensitive << ( grp_first_counter_fu_70_out_counter );

    SC_METHOD(thread_out_counter2);
    sensitive << ( grp_first_counter_fu_86_out_counter );

    SC_THREAD(thread_hdltv_gen_clock1);
    sensitive << ( clock1.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "custom2_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, clock1, "(port)clock1");
    sc_trace(mVcdFile, clock2, "(port)clock2");
    sc_trace(mVcdFile, reset, "(port)reset");
    sc_trace(mVcdFile, enable, "(port)enable");
    sc_trace(mVcdFile, out_counter1, "(port)out_counter1");
    sc_trace(mVcdFile, out_counter2, "(port)out_counter2");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, grp_first_counter_fu_70_out_counter, "grp_first_counter_fu_70_out_counter");
    sc_trace(mVcdFile, grp_first_counter_fu_86_out_counter, "grp_first_counter_fu_86_out_counter");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
#endif

    }
    mHdltvinHandle_clock1.open("custom2_clock1.hdltvin.dat");
    mHdltvoutHandle_clock1.open("custom2_clock1.hdltvout.dat");
}

custom2::~custom2() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle_clock1 << "] " << endl;
    mHdltvoutHandle_clock1 << "] " << endl;
    mHdltvinHandle_clock1.close();
    mHdltvoutHandle_clock1.close();
    delete grp_first_counter_fu_70;
    delete grp_first_counter_fu_86;
}

void custom2::thread_ap_CS_fsm() {
    ap_CS_fsm = ap_const_lv2_0;
}

void custom2::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void custom2::thread_out_counter1() {
    out_counter1 = grp_first_counter_fu_70_out_counter.read();
}

void custom2::thread_out_counter2() {
    out_counter2 = grp_first_counter_fu_86_out_counter.read();
}

void custom2::thread_hdltv_gen_clock1() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle_clock1 << "[ " << endl;
    mHdltvoutHandle_clock1 << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle_clock1 << mComma << "{"  <<  " \"reset\" :  \"" << reset.read() << "\" ";
        mHdltvinHandle_clock1 << " , " <<  " \"enable\" :  \"" << enable.read() << "\" ";
        mHdltvoutHandle_clock1 << mComma << "{"  <<  " \"out_counter1\" :  \"" << out_counter1.read() << "\" ";
        mHdltvoutHandle_clock1 << " , " <<  " \"out_counter2\" :  \"" << out_counter2.read() << "\" ";
        mHdltvinHandle_clock1 << "}" << std::endl;
        mHdltvoutHandle_clock1 << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

