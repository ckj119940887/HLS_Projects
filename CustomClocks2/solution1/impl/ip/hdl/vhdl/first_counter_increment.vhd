-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity first_counter_increment is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    enable : IN STD_LOGIC;
    out_counter : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_counter_ap_vld : OUT STD_LOGIC;
    first_counter_count_V_i : IN STD_LOGIC_VECTOR (3 downto 0);
    first_counter_count_V_o : OUT STD_LOGIC_VECTOR (3 downto 0);
    first_counter_count_V_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of first_counter_increment is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal tmp_read_fu_68_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "10";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal v_V_fu_94_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state2;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    first_counter_count_V_o <= v_V_fu_94_p2;

    first_counter_count_V_o_ap_vld_assign_proc : process(tmp_read_fu_68_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_read_fu_68_p2 = ap_const_lv1_1))) then 
            first_counter_count_V_o_ap_vld <= ap_const_logic_1;
        else 
            first_counter_count_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_counter <= v_V_fu_94_p2;

    out_counter_ap_vld_assign_proc : process(tmp_read_fu_68_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_read_fu_68_p2 = ap_const_lv1_1))) then 
            out_counter_ap_vld <= ap_const_logic_1;
        else 
            out_counter_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_read_fu_68_p2 <= (0=>enable, others=>'-');
    v_V_fu_94_p2 <= std_logic_vector(unsigned(first_counter_count_V_i) + unsigned(ap_const_lv4_1));
end behav;
